/**
 * cloudwpss23-openapi-cyan
 * OpenAPI Reference für das CloudWP der HAW Hamburg für das SommerSemster 2023
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * 
     * @alias module:model/User
     * @param id {Object} Unique identifier for the given user.
     * @param firstName {Object} 
     * @param lastName {Object} 
     * @param email {Object} 
     * @param emailVerified {Object} Set to true if the user's email has been verified.
     */
    constructor(id, firstName, lastName, email, emailVerified) { 
        
        User.initialize(this, id, firstName, lastName, email, emailVerified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, firstName, lastName, email, emailVerified) { 
        obj['id'] = id;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['email'] = email;
        obj['emailVerified'] = emailVerified;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], Object);
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], Object);
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], Object);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], Object);
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], Object);
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], Object);
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

User.RequiredProperties = ["id", "firstName", "lastName", "email", "emailVerified"];

/**
 * Unique identifier for the given user.
 * @member {Object} id
 */
User.prototype['id'] = undefined;

/**
 * @member {Object} firstName
 */
User.prototype['firstName'] = undefined;

/**
 * @member {Object} lastName
 */
User.prototype['lastName'] = undefined;

/**
 * @member {Object} email
 */
User.prototype['email'] = undefined;

/**
 * @member {Object} dateOfBirth
 */
User.prototype['dateOfBirth'] = undefined;

/**
 * Set to true if the user's email has been verified.
 * @member {Object} emailVerified
 */
User.prototype['emailVerified'] = undefined;

/**
 * The date that the user was created.
 * @member {Object} createDate
 */
User.prototype['createDate'] = undefined;






export default User;

